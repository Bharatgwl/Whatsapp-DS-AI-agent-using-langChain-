@app.route('/webhook', methods=['POST'])
def webhook():
    incoming_data = request.form
    user_msg = incoming_data.get("Body")
    from_number = incoming_data.get("From")
    num_media = int(incoming_data.get("NumMedia", 0))

    chat_collection.insert_one({
        "from": from_number,
        "message": user_msg if user_msg else "[media]",
        "sender": "user",
        "timestamp": datetime.now(UTC)
    })

    if num_media > 0:
        # Handle CSV File
        media_url = incoming_data.get("MediaUrl0")
        content_type = incoming_data.get("MediaContentType0")

        if "csv" in content_type:
            try:
                response = requests.get(media_url, auth=(TWILIO_SID, TWILIO_AUTH_TOKEN))
                csv_data = response.content.decode('utf-8')
                df = pd.read_csv(StringIO(csv_data))  # üëà parse directly from string

                summary = df.describe(include='all').to_string()
                null_info = df.isnull().sum().to_string()
                insights = f"üìä CSV Summary:\n{summary}\n\nüï≥Ô∏è Missing Values:\n{null_info}"

                # Save bot message
                chat_collection.insert_one({
                    "from": from_number,
                    "message": insights,
                    "sender": "bot",
                    "timestamp": datetime.now(UTC)
                })

                twilio_client.messages.create(
                    body=insights[:1599],  # WhatsApp has ~1600 char limit
                    from_=f"whatsapp:{TWILIO_PHONE_NUMBER}",
                    to=from_number
                )
            except Exception as e:
                error_msg = f"‚ùå Error analyzing CSV: {e}"
                twilio_client.messages.create(
                    body=error_msg,
                    from_=f"whatsapp:{TWILIO_PHONE_NUMBER}",
                    to=from_number
                )
        else:
            twilio_client.messages.create(
                body="‚ö†Ô∏è Please send a CSV file only.",
                from_=f"whatsapp:{TWILIO_PHONE_NUMBER}",
                to=from_number
            )
    else:
        # Regular chat mode
        if model:
            chat_history = chat_collection.find({"from": from_number}).sort("timestamp", -1).limit(5)
            chat_history_list = list(chat_history)[::-1]

            conversation_context = system_prompt + "\n"
            for msg in chat_history_list:
                role = "User" if msg["sender"] == "user" else "Bot"
                conversation_context += f"{role}: {msg['message']}\n"
            conversation_context += f"User: {user_msg}\nBot:"

            try:
                response = model.generate_content(conversation_context + " Please answer in under 200 words.")
                bot_msg = response.text if response.text else "Sorry, I couldn't generate a response."
            except Exception as e:
                bot_msg = f"Error generating response: {e}"

            chat_collection.insert_one({
                "from": from_number,
                "message": bot_msg,
                "sender": "bot",
                "timestamp": datetime.now(UTC)
            })

            try:
                twilio_client.messages.create(
                    body=bot_msg[:1599],
                    from_=f"whatsapp:{TWILIO_PHONE_NUMBER}",
                    to=from_number
                )
            except Exception as e:
                print(f"Error sending Twilio message: {e}")
        else:
            print("Gemini model not initialized.")

    return "OK", 200